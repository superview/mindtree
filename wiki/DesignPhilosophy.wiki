#summary The basic philosophy behind the design.
#labels Developer,out-of-date

MindTree is a 100% Pure Python Object Oriented solution.  This software has a highly modular, multi-tier architecture starting with a generic Application Framework organized similarly to MVC, on top of this is a plugin framework, all views, outline saving/retrieving, importing and exporting, and tools are all written as plugins.  The purpose of “everything’s a plugin” is to increase modularity and reduce coupling.  Ultimately, this makes it easier to add new features.

I've generated a sample webpage from this software viewable here http://members.cox.net/ronpro/welcome.html.  This was a test of the HTML exporter plugin and its ability to generate an interactive tree for a large outline (about 2000 entries).

The application is 100% Python.  The gui is written using Tkinter and Tix (I'm open to other libraries for the GUI, improving the Framework should make it possible to have a pluggable main window which would simplify development for a different or alternative GUIs).  The app supports unicode in the outlines.  There's a spell-checker plugin (which requires pyenchant).  The rest of the application, frameworks and plugins have been written by me.  For screen shots of the app so far see: http://members.cox.net/ronpro/scrnCap1.JPG and http://members.cox.net/ronpro/scrnCap2.JPG

I have UML diagrams which would be included in the developer distribution.  Other developer documentation is in the source code.

My motive:  I'm a research scientist.  My prefered method to record, review, edit and organize my notes is within an outline (rather than a flat notebook format used by most researchers).  The ability to consider new ideas can be as easy as moving items around in the outline.  I've used many commercial programs in the past but all have had some limitation or another.  Most don't support unicode (I need unicode characters to record mathematical and logical formulae).  Those that do produce html don't produce the side-by-side view of an interactive tree (able to expand or collapse nodes) beside the actual on-screen notes.  The interactive tree is a necessity for me with over 2000 entries in my largest outline and growing fast.

Design Philosophy:  I've attempted to keep to the following design philosophy (prioritized by order).
- User Experience -- everything should be easy for the user.
- OO, Maximize modularity, minimize cross dependence.
  (e.g. MindTree's Application framework, plugin framework and word processor know nothing about each other, the problem domain and nothing about the other modules in the application).
- KISS, I prefer simple straightforward code over speedy "tricks".  If it's hard to read or understand I'll probably hate it.
- Minimize 3rd party modules in the core application.  I know 3rd party libs can make it easier to develop and this would seem to violate KISS.  However, with User Experience being higher priority, the less there is for a user to install the easier.  Best case: the user installs Python and s/he's ready to run MindTree.  I don't mind requiring 3rd party libs for most plugins.  My take on this is here:
      - If it's part of the core distribution (the core application or a plugin that's part of the main distribution), do everything possible to avoid 3rd party libs.
      - For plugins distributed separately from the main application installer, the plugin must check for the required libs in its startup.  If a lib is not present exit gracefully (at most display a dialog stating that the required lib is not installed.) 
- If at all possible, provide unit test with each module (including plugins)

Future Direction:
- Some of the features in the menus and on the toolbars are not yet implemented.
   (e.g. find, search/replace, lists and tables in the word processor)
- The contents of the selected outline entry is displayed in the content pane to the right of the outline.  Right now the only supported content is formatted text in a word processor (actually a glorified Tkinter Text widget).  The Text widget is part of the core app.  I want this widget to be turned into a plugin so that other kinds of content are possible with other content editor plugins.  The main app would then select and display the appropriate content editor for a given outline entry.
- Currently, cutting and pasting is possible, however cutting and pasing formatted text is only possible within the application.  Want to support cutting and pasing stylized text with the system clipboard and other applications (word, star office, etc.)
- Import export other formats (importers and exporters are already plugins).  We just need to write more of them.
- Support multiple views of a single outline so we can view different parts of the outline simultaneously.
- Support cutting and pasting, dragging and dropping across different outlines.
- Customizable appearance for HTML output.
- Any other enhancements can be determined by the developers and users.